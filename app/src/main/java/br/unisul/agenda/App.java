/*
 * This source file was generated by the Gradle 'init' task
 */
package br.unisul.agenda;

import br.unisul.agenda.model.Usuario;
import br.unisul.agenda.model.Evento;
import br.unisul.agenda.model.TipoEvento;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class App {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        List<Usuario> usuarios = new ArrayList<>();
        List<Evento> eventos = new ArrayList<>();

        boolean running = true;

        while (running) {
            System.out.println("\n=== Menu Principal ===");
            System.out.println("1 - Cadastrar novo usuário");
            System.out.println("2 - Cadastrar novo evento");
            System.out.println("3 - Listar eventos cadastrados");
            System.out.println("4 - Confirmar participação em evento");
            System.out.println("5 - Sair");
            System.out.println("6 - Listar eventos confirmados de um usuário");

            System.out.print("Escolha uma opção: ");
            int opcao = Integer.parseInt(sc.nextLine());

            switch (opcao) {
                case 1:
                    cadastrarUsuario(sc, usuarios);
                    break;
                case 2:
                    cadastrarEvento(sc, eventos);
                    break;
                case 3:
                    listarEventos(eventos);
                    break;
                case 4:
                    confirmarParticipacao(sc, usuarios, eventos);
                    break;
                case 5:
                    running = false;
                    System.out.println("Encerrando o sistema. Até logo!");
                    break;
                case 6:
                    listarEventosConfirmadosUsuario(sc, usuarios, eventos);
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }

        sc.close();
    }

    private static void cadastrarUsuario(Scanner sc, List<Usuario> usuarios) {
        Usuario usuario = new Usuario();

        System.out.print("Digite o nome: ");
        usuario.nome = sc.nextLine();

        System.out.print("Digite o email: ");
        usuario.email = sc.nextLine();

        System.out.print("Digite o telefone: ");
        usuario.telefone = sc.nextLine();

        System.out.print("Digite o endereço: ");
        usuario.endereco = sc.nextLine();

        usuarios.add(usuario);

        System.out.println("\nUsuário cadastrado com sucesso!");
        System.out.println("Nome: " + usuario.nome);
        System.out.println("Email: " + usuario.email);
        System.out.println("Telefone: " + usuario.telefone);
        System.out.println("Endereço: " + usuario.endereco);
    }

    private static void cadastrarEvento(Scanner sc, List<Evento> eventos) {
        Evento evento = new Evento();

        System.out.print("Digite o nome do evento: ");
        evento.nome = sc.nextLine();

        System.out.print("Digite o endereço do evento: ");
        evento.endereco = sc.nextLine();

        System.out.print("Digite a descrição: ");
        evento.descricao = sc.nextLine();

        System.out.println("Escolha o tipo de evento:");
        for (TipoEvento tipo : TipoEvento.values()) {
            System.out.println("- " + tipo);
        }

        evento.tipo = TipoEvento.valueOf(sc.nextLine().toUpperCase());

        System.out.print("Digite a data e hora do evento (formato: dd/MM/yyyy HH:mm): ");
        String dataHora = sc.nextLine();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        evento.horario = LocalDateTime.parse(dataHora, formato);

        eventos.add(evento);

        System.out.println("Evento cadastrado com sucesso!");
    }

    private static void listarEventos(List<Evento> eventos) {
        if (eventos.isEmpty()) {
            System.out.println("Nenhum evento cadastrado.");
        } else {
            System.out.println("\n=== Eventos Cadastrados ===");
            for (Evento e : eventos) {
                System.out.println("-------------------------");
                System.out.println("Nome: " + e.nome);
                System.out.println("Endereço: " + e.endereco);
                System.out.println("Descrição: " + e.descricao);
                System.out.println("Tipo: " + e.tipo);
                System.out.println("Horário: " + e.horario);
                System.out.println("Participantes confirmados: " + e.participantes.size());
            }
        }
    }

    private static void confirmarParticipacao(Scanner sc, List<Usuario> usuarios, List<Evento> eventos) {
        if (usuarios.isEmpty()) {
            System.out.println("Nenhum usuário cadastrado.");
            return;
        }

        if (eventos.isEmpty()) {
            System.out.println("Nenhum evento cadastrado.");
            return;
        }

        System.out.println("\n=== Usuários Cadastrados ===");
        for (int i = 0; i < usuarios.size(); i++) {
            System.out.println(i + " - " + usuarios.get(i).nome);
        }

        System.out.print("Usuário (número): ");
        int indiceUsuario = Integer.parseInt(sc.nextLine());

        if (indiceUsuario < 0 || indiceUsuario >= usuarios.size()) {
            System.out.println("Usuário inválido.");
            return;
        }

        Usuario usuarioSelecionado = usuarios.get(indiceUsuario);

        System.out.println("\n=== Eventos Disponíveis ===");
        for (int i = 0; i < eventos.size(); i++) {
            System.out.println(i + " - " + eventos.get(i).nome + " em " + eventos.get(i).horario);
        }

        System.out.print("Evento (número): ");
        int indiceEvento = Integer.parseInt(sc.nextLine());

        if (indiceEvento < 0 || indiceEvento >= eventos.size()) {
            System.out.println("Evento inválido.");
            return;
        }

        Evento eventoSelecionado = eventos.get(indiceEvento);

        if (eventoSelecionado.participantes.contains(usuarioSelecionado)) {
            System.out.println("Este usuário já está confirmado nesse evento.");
            return;
        }

        eventoSelecionado.participantes.add(usuarioSelecionado);
        System.out.println(usuarioSelecionado.nome + " foi confirmado(a) no evento " + eventoSelecionado.nome + "!");
    }
    private static void listarEventosConfirmadosUsuario(Scanner sc, List<Usuario> usuarios, List<Evento> eventos) {
        if (usuarios.isEmpty()) {
            System.out.println("Nenhum usuário cadastrado.");
            return;
        }

        System.out.println("\n=== Usuários Cadastrados ===");
        for (int i = 0; i < usuarios.size(); i++) {
            System.out.println(i + " - " + usuarios.get(i).nome);
        }

        System.out.print("Usuário (número): ");
        int indice = Integer.parseInt(sc.nextLine());

        if (indice < 0 || indice >= usuarios.size()) {
            System.out.println("Índice de usuário inválido.");
            return;
        }

        Usuario selecionado = usuarios.get(indice);

        System.out.println("\n=== Eventos confirmados para " + selecionado.nome + " ===");

        boolean encontrou = false;

        for (Evento e : eventos) {
            if (e.participantes.contains(selecionado)) {
                System.out.println("• " + e.nome + " em " + e.horario + " (" + e.tipo + ")");
                encontrou = true;
            }
        }

        if (!encontrou) {
            System.out.println("Este usuário não está confirmado em nenhum evento.");
        }
    }
}
